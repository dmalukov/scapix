cmake_minimum_required(VERSION 3.14)

set(VERBOSE true)
set(CMAKE_VERBOSE_MAKEFILE true)

function(camel_case source target)
    set(up true)
    set(res "")

    string(LENGTH ${source} source_length)
    math(EXPR last_char_index "${source_length} - 1")

    foreach(char_index RANGE ${last_char_index})
        string(SUBSTRING "${source}" "${char_index}" "1" char)
        if(char STREQUAL "_")
            set(up true)
        else()
            if(up)
                string(TOUPPER ${char} char)
                set(up false)
            endif()
            string(APPEND res ${char})
        endif()
    endforeach()
    set(${target} ${res} PARENT_SCOPE)
endfunction(camel_case)

function(scapix_bridge_headers target domain)
set(bridge_headers ${ARGN})

add_subdirectory(${SCAPIX_ROOT}/project/cmake ${PROJECT_BINARY_DIR}/scapix)

target_link_libraries(${target} PUBLIC scapix)


# extract scapix_project_name from domain

string(FIND ${domain} "." scapix_domain_pos REVERSE)
math(EXPR scapix_domain_pos "${scapix_domain_pos}+1")
string(SUBSTRING ${domain} ${scapix_domain_pos} -1 scapix_project_name)

# generated_java_cpp
set(generated_java_cpp
    "${PROJECT_ROOT}/generated/bridge/java/${scapix_project_name}.cpp"
)

set_source_files_properties(${generated_java_cpp} PROPERTIES GENERATED TRUE)

file(REMOVE "${generated_java_cpp}")

file(APPEND "${generated_java_cpp}"
"// Generated by Scapix Language Bridge

")
file(APPEND "${generated_java_cpp}" "#include <scapix/bridge/java/object.h>

")

foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_java_cpp}" "void scapix_java_export_${name}();\n")
endforeach(filename)

file(APPEND "${generated_java_cpp}" "

JavaVM* pj_jni_jvm = nullptr;

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)
{
  pj_jni_jvm = vm;

  try
  {
    auto result = scapix::bridge::java::on_load(vm, reserved);

")
foreach(filename ${bridge_headers})
    get_filename_component(name ${filename} NAME_WE)
    file(APPEND "${generated_java_cpp}" "    scapix_java_export_${name}();\n")
endforeach(filename)
file(APPEND "${generated_java_cpp}" "
    return result;
  }
  catch (const scapix::link::java::vm_exception& e)
  {
    e.get()->throw_();
  }

  return 0;
}
")

set(generated_sources_java
    ${generated_java_cpp}
)

string(REPLACE "." "/" domain_path ${domain})

foreach(bridge_header ${bridge_headers})

    get_filename_component(bridge_header_name ${bridge_header} NAME_WE)
    file(RELATIVE_PATH bridge_header_relative ${PROJECT_ROOT} ${bridge_header})
    camel_case(${bridge_header_name} bridge_header_name_camel)

    set(output_files_java)

	set(file_to_be_generated "${PROJECT_ROOT}/generated/bridge/java/${bridge_header_name}.cpp")
    list(APPEND output_files_java
           # "${PROJECT_ROOT}/generated/bridge/java/${domain_path}/${bridge_header_name_camel}.java"
            ${file_to_be_generated}
    )

    list(APPEND generated_sources_java ${output_files_java})

	if(${ANDROID_ABI} STREQUAL "armeabi-v7a")
		set(scapix_clang_config "-DANDROID;-target;armv7a-linux-androideabi")
	elseif(${ANDROID_ABI} STREQUAL "arm64-v8a")
		set(scapix_clang_config "-DANDROID;-target;aarch64-linux-android")
	elseif(${ANDROID_ABI} STREQUAL "x86")
		set(scapix_clang_config "-DANDROID;-target;i686-linux-android")
	elseif(${ANDROID_ABI} STREQUAL "x86_64")
		set(scapix_clang_config "-DANDROID;-target;x86_64-linux-android")
	else()
		message(FATAL_ERROR "Unknown Android ABI")
	endif()

    add_custom_command(
            OUTPUT ${file_to_be_generated}
            COMMAND ${SCAPIX_ROOT}/bin/${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}/scapix -scapix-domain=${domain} ${bridge_header} -- -xc++ -std=c++17 ${scapix_clang_config} "$<$<BOOL:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}>:-I$<JOIN:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES},;-I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>>:-I$<JOIN:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>,;-I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>>:-D$<JOIN:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>,;-D>>"  
            #COMMAND ${CMAKE_COMMAND} -E echo "/* dm-generated */" > ${file_to_be_generated}
			DEPENDS ${bridge_header}
            IMPLICIT_DEPENDS CXX ${bridge_header}
            WORKING_DIRECTORY ${PROJECT_ROOT}
            COMMENT "Running Scapix Bridge for ${bridge_header_relative}"
            COMMAND_EXPAND_LISTS
            VERBATIM
    )
	
	
  add_custom_command( TARGET ${target}
					  COMMAND ${CMAKE_COMMAND} -E echo "====>>> ${SCAPIX_ROOT}/bin/${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}/scapix -scapix-domain=${domain} ${bridge_header} -- -xc++ -std=c++17 ${scapix_clang_config}" "$<$<BOOL:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}>: -I$<JOIN:${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}, -I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>>: -I$<JOIN:$<TARGET_PROPERTY:${target},INCLUDE_DIRECTORIES>, -I>>" "$<$<BOOL:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>>: -D$<JOIN:$<TARGET_PROPERTY:${target},COMPILE_DEFINITIONS>, -D>>")

endforeach(bridge_header)

set(generated_sources
    ${generated_sources_java}
)

#message(WARNING generated_sources=${generated_sources})
#message (WARNING generated_sources_var_name=${${generated_sources_var_name}})

string(CONCAT generated_sources_var_name "generated_sources_" ${SCAPIX_BRIDGE})

set_source_files_properties(${generated_sources} PROPERTIES HEADER_FILE_ONLY TRUE)
set_source_files_properties(${${generated_sources_var_name}} PROPERTIES HEADER_FILE_ONLY FALSE)
# message (WARNING "***********   ${${generated_sources_var_name}}")
# message (WARNING "***********   ${generated_sources_var_name}")
target_sources(${target} PUBLIC ${generated_sources})
source_group(TREE ${PROJECT_ROOT}/generated PREFIX "generated" FILES ${generated_sources})

endfunction(scapix_bridge_headers)
